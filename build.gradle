plugins {
    id 'java'
}

group = 'duth.dip.cse'
version = '1.0'

allprojects {
    version = '1.0'
}

tasks.named('jar') {
    enabled = false
}

repositories {
    mavenCentral()
}

ext {
    libDir = file(rootProject.layout.buildDirectory.dir("lib").get())
    distributionDir = file(rootProject.layout.buildDirectory.dir("distribution").get())
    demoDir = file(rootProject.layout.projectDirectory.dir("demo"))
    iconsDir = file(rootProject.layout.projectDirectory.dir("icons"))

    allDirs = [libDir, distributionDir, demoDir, iconsDir]
}

tasks.register("createDirsIfNotExist") {
    dependsOn build
    doLast {
        allDirs.forEach { directory ->
            if (!directory.exists()) {
                directory.mkdirs()
                directory.setWritable(true, false)
                println("Directory: " + directory + " was created!")
            }
        }
    }
}


tasks.register('collectArtifacts', Copy) {
    dependsOn createDirsIfNotExist
    dependsOn(subprojects.collect { subproject -> subproject.tasks.named("build") })

    description = "Collects all subproject artifacts into a single directory"
    group = "distribution"
    subprojects.each { subproject ->

        def subprojectArtifactsDir = subproject.layout.buildDirectory.dir("libs").get().asFile

        from(subprojectArtifactsDir) {
            include "**\\*.jar"
        }
        into(libDir)
    }
}

tasks.register('collectDependencies') {
    dependsOn collectArtifacts
    doLast {
        description = "Collects all subprojects' dependencies into a single directory"
        group = "distribution"
        subprojects.each { subproject ->
            def runtimeClasspath = subproject.configurations.getByName('runtimeClasspath');
            runtimeClasspath.each { file ->
                if (!libDir.listFiles().contains(file.name)) {
                    copy {
                        from(file)
                        into(libDir)
                    }
                }
            }
        }
    }
}

tasks.register("jpackage",Exec) {

    dependsOn collectArtifacts
    dependsOn collectDependencies
    description = 'Packages the application using jpackage'

    commandLine "cmd.exe", "/d", "/c", "jpackage",
       "--input", ".\\build\\lib\\",
       "--name", "ColorSpaceEditor",
       "--main-jar", "ui-1.0.jar",
       "--main-class", "duth.dip.cse.ui.Main",
       "--type", "exe",
       "--icon", ".\\icons\\ColorSpaceEditor.ico",
       "--app-version", "1.0",
       "--win-shortcut",
       "--win-menu",
       "--win-dir-chooser",
       "--dest", ".\\build\\distribution"
}
